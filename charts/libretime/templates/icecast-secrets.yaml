apiVersion: v1 
kind: Secret
metadata:
  creationTimestamp: null
  name: icecast-passwords
stringData:
  # # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  # {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "icecast-passwords") | default dict }}
  # {{- $secretData := (get $secretObj "data") | default dict }}
  # # set to existing secret data or generate a random one when not exists
  # {{- $ICECAST_ADMIN_PASSWORD := (get $secretData "ICECAST_ADMIN_PASSWORD") | default (randAlphaNum 32 | b64enc) }}
  # {{- $ICECAST_RELAY_PASSWORD := (get $secretData "ICECAST_RELAY_PASSWORD") | default (randAlphaNum 32 | b64enc) }}
  # {{- $ICECAST_SOURCE_PASSWORD := (get $secretData "ICECAST_SOURCE_PASSWORD") | default (randAlphaNum 32 | b64enc) }}
  # ICECAST_ADMIN_PASSWORD: {{ $ICECAST_ADMIN_PASSWORD | quote }}
  # ICECAST_RELAY_PASSWORD: {{ $ICECAST_RELAY_PASSWORD | quote }}
  # ICECAST_SOURCE_PASSWORD: {{ $ICECAST_SOURCE_PASSWORD | quote }}
  ICECAST_ADMIN_PASSWORD: {{ .Values.icecast.stream.passwords.admin | quote }}
  ICECAST_RELAY_PASSWORD: {{ .Values.icecast.stream.passwords.relay | quote }}
  ICECAST_SOURCE_PASSWORD: {{ .Values.icecast.stream.passwords.source | quote }}
---
{{- if eq .Values.icecast.ingress.auth.enabled true }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ quote .Values.icecast.ingress.auth.secretName }}
stringData:
  users: {{ htpasswd .Values.icecast.ingress.auth.username .Values.icecast.ingress.auth.password }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ quote .Values.icecast.ingress.auth.secretName }}
spec:
  basicAuth:
    secret: {{ quote .Values.icecast.ingress.auth.secretName }}
{{ end }}
