apiVersion: v1
kind: Secret
metadata:
  name: libretime-conf
stringData:
  config.yml: |
    general:
      public_url: {{ .Values.publicUrl }}
      api_key: {{ .Values.api.config.general.api_key }}
      secret_key: {{ .Values.api.config.general.secret_key }}
      allowed_cors_origins: {{ .Values.api.config.general.allowed_cors_origins | toYaml | nindent 6 }}
      timezone: {{ .Values.api.config.general.timezone }}
      cache_ahead_hours: {{ .Values.api.config.general.cache_ahead_hours }}
      auth: {{ .Values.api.config.general.auth }}
    storage:
      path: /srv/libretime
    database:
      host: postgres.{{ .Release.Namespace }}.svc.cluster.local
      port: 5432
      name: libretime
      {{- if .Values.postgres.secret.existingSecret }}
      {{- $pgObj := (lookup "v1" "Secret" .Release.Namespace .Values.postgres.secret.existingSecret) }}
      {{- $pgSecretData := (get $pgObj "data") }}
      {{- $postgresUser := (get $pgSecretData "username") }}
      {{- $postgresPass := (get $pgSecretData "password") }}
      user: {{ $postgresUser }}
      password: {{ $postgresPass }}
      {{- else }}
      user: {{ .Values.postgres.secret.username }}
      password: {{ .Values.postgres.secret.password }}
      {{ end }}
    rabbitmq:
      host: rabbitmq
      port: {{ .Values.rabbitmq.service.port }}
      vhost: /libretime
      {{- if .Values.rabbitmq.secret.existingSecret }}
      {{- $rmqsecretObj := (lookup "v1" "Secret" .Release.Namespace .Values.rabbitmq.secret.existingSecret) }}
      {{- $rmqSecretData := (get $rmqsecretObj "data") }}
      {{- $rabbitmqUser := (get $rmqSecretData "username") }}
      {{- $rabbitmqPass := (get $rmqSecretData "password") }}
      user: {{ $rabbitmqUser }}
      password: {{ $rabbitmqPass }}
      {{- else }}
      user: {{ .Values.rabbitmq.secret.username }}
      password: {{ .Values.rabbitmq.secret.password }}
      {{ end }}
    email:
      from_address: {{ .Values.email.fromaddress }}
      host: {{ .Values.email.host }}
      port: {{ .Values.email.port }}
      encryption:
      user: ""
      password: ""
      timeout:
      cert_file:
      key_file:
    playout:
      liquidsoap_host: 127.0.0.1
      liquidsoap_port: 1234
      record_file_format: mp3
      record_bitrate: 256
      record_samplerate: 44100
      record_channels: 2
      record_sample_size: 16
    liquidsoap:
      server_listen_address: 127.0.0.1
      server_listen_port: 1234
      harbor_listen_address: ["0.0.0.0"]
      harbor_ssl_certificate:
      harbor_ssl_private_key:
      harbor_ssl_password:
    stream: 
      inputs:
        main:
          public_url: {{ .Values.showHost }}
          mount: {{ .Values.icecast.stream.mountpoint }}
          port: 8001
          secure: false
        show:
          public_url: {{ .Values.showHost }}
          mount: show
          port: 8002
          secure: false
      outputs:
        .default_icecast_output: &default_icecast_output
          host: icecast.{{ .Release.Namespace }}.svc.cluster.local
          public_url: {{ .Values.streamUrl }}
          port: {{ .Values.icecast.service.port }}
          source_password: {{ .Values.icecast.stream.passwords.source }}
          admin_password: {{ .Values.icecast.stream.passwords.admin }}
          name: {{ .Values.icecast.stream.name }}
          description: {{ .Values.icecast.stream.description }}
          website: {{ .Values.icecast.stream.website }}
          genre: {{ .Values.icecast.stream.genre }}
        icecast:
          - <<: *default_icecast_output
            enabled: true
            mount: {{ .Values.icecast.stream.mountpoint }}
            audio:
              format: mp3
              bitrate: 256
              enable_metadata: false
            mobile: false
